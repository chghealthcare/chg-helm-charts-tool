---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "service.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "service.name" . }}
    helm.sh/chart: {{ include "service.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.scaling.minReplicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "service.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "service.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      {{- if .Values.persistentVolume }}
      schedulerName: stork
      {{- end }}
      {{- if .Values.initContainer }}
      initContainers:
      - name: {{ .Values.initContainer.name }}
        image: {{ .Values.initContainer.image }}
        imagePullPolicy: {{ .Values.initContainer.imagePullPolicy }}
        command: {{ .Values.initContainer.command }}
      {{- end }}
      containers:
        {{- include "service.database"  . | indent 8 }}
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            {{- .Values.resources | toYaml | nindent 12 }}
          env:
          {{- range .Values.envs }}
            - name: {{ .name | quote }}
              value: {{ .value | quote }}
          {{- end }}
          {{- range .Values.configMapKeys }}
            - name: {{ .name | quote}}
              valueFrom:
                configMapKeyRef:
                    name: {{ .keymap | quote }}
                    key: {{ .key | quote }}
          {{- end }}
          {{- range .Values.secretKeys }}
            - name: {{ .name | quote}}
              valueFrom:
                secretKeyRef:
                    name: {{ .secret | quote }}
                    key: {{ .key | quote }}
          {{- end }}
          envFrom:
          {{- if .Values.pullVaultSecrets }}
            - secretRef:
                name: {{ include "service.fullname" . | quote }}
          {{- end }}
          {{- range .Values.secretRefs }}
            - secretRef:
                name: {{ . | quote }}
          {{- end }}
          {{- range .Values.configMaps }}
            - configMapRef:
                name: {{ . | quote }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.target }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: {{ .Values.health.path | quote }}
              port: {{ .Values.service.target }}
            initialDelaySeconds: 20
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: {{ .Values.health.path | quote }}
              port: {{ .Values.service.target }}
            initialDelaySeconds: 20
            periodSeconds: 20
          {{- if .Values.persistentVolume }}
          volumeMounts:
            - mountPath: {{ .Values.persistentVolume.mountPath }}
              name: {{ .Values.persistentVolume.volumeName }}
          {{- end -}}
      {{- with .Values.nodeSelector -}}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end -}}
      {{ if .Values.persistentVolume }}
      volumes:
        - name: {{ .Values.persistentVolume.volumeName }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistentVolume.claimName }}
      {{- end -}}
    {{ include "service.affinity" . | indent 6 }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
