{{ if .Values.postgres }}
{{ $root := . }}
{{ $teamId := .Values.postgres.teamId }}
{{ $dbName := .Values.postgres.dbName }}
{{ $dbOwner := .Values.postgres.owner }}
{{ $releaseNamespace := .Release.Namespace }}
{{ $dbClusterName := printf "%s-%s" $teamId $dbName }}
{{ $dbOwnerSecret := printf "%s.%s" $dbOwner $dbClusterName }}
{{ if $root.Values.feature }}
{{ $dbClusterName = printf "%s-%s-%s" $teamId $root.Values.feature $dbName }}
{{ $dbOwnerSecret = printf "%s.%s" $dbOwner $dbClusterName }}
{{ end }}

{{ $dbNamespace := printf "%s-database" $releaseNamespace }}
---
apiVersion: "acid.zalan.do/v1"
kind: postgresql
metadata:
  name: {{ $dbClusterName }}
  namespace: {{ $dbNamespace }}
  labels:
{{ include "service.commonLabels" . | indent 4 }}
    cluster-name: {{ $dbClusterName }}
  annotations:
    {{- if .Values.cleanUpIn }}
    janitor/ttl: {{ .Values.cleanUpIn }}
    {{- end }}
spec:
  teamId: {{ quote $teamId }}
  volume:
    size: {{ .Values.postgres.size }}
    storageClass: px-postgres-sc
  numberOfInstances: {{ .Values.postgres.numberOfInstances }}
  users:
    # database owner
    {{ $dbOwner }}:
    - superuser
    - createdb

  #databases: name->owner
  databases:
    {{ $dbName }}: {{ $dbOwner }}
  postgresql:
    version: {{ quote .Values.postgres.version }}

  {{ include "service.affinity" . | indent 2 }}
  {{ include "service.tolerations" . | indent 2 }}



# Replicated Secret from the {Database Namespace}/{dbOwner Secret}
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    replicator.v1.mittwald.de/replicate-from: {{ $dbNamespace }}/{{ $dbOwnerSecret }}
  labels:
    cluster-name: {{ $dbClusterName }}
{{ include "service.commonLabels" . | indent 4 }}
    team: {{ $teamId }}
  name: {{ $dbOwnerSecret }}
  namespace: {{ $releaseNamespace }}
data: {}


{{- if or (eq .Values.environment "stage") (eq .Values.environment "prod")}}
# Postgres DB application backup schedule spec
---
apiVersion: stork.libopenstorage.org/v1alpha1
kind: ApplicationBackupSchedule
metadata:
  name: {{ printf "%s-daily-backup" $dbClusterName }}
  namespace: {{ $dbNamespace }}
spec:
  reclaimPolicy: Retain
  schedulePolicyName: default-daily-policy
  template:
    spec:
      backupLocation: s3backup-default
      namespaces:
      - {{ $dbNamespace }}
      postExecRule: ""
      preExecRule: ""
      reclaimPolicy: Retain
      selectors:
        cluster-name: {{ $dbClusterName }}

{{- end }}

{{- if or (eq .Values.environment "stage") (eq .Values.environment "prod")}}
# Helm Job hook on pre-delete backup postgres db cluster
---
apiVersion: stork.libopenstorage.org/v1alpha1
kind: ApplicationBackup
metadata:
  name: {{ printf "%s-backup" $dbClusterName }}
  namespace: {{ $dbNamespace }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded    
  spec:
    backupLocation: s3backup-default
    namespaces:
    - {{ $dbNamespace }}
   reclaimPolicy: Delete
   selectors:
     cluster-name: $dbClusterName
   preExecRule:
   postExecRule:

{{- end }}

{{- if or (eq .Values.environment "stage") (eq .Values.environment "prod") }}
{{- if .Values.postgres.restoredb }}
# Helm Job hook on pre-install to restore postgres db cluster from the last backup
---
apiVersion: stork.libopenstorage.org/v1alpha1
kind: ApplicationRestore
metadata:
  name: {{ .Values.postgres.restoredb }}
  namespace: {{ $dbNamespace }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded    
  spec:
    backupName: {{ .Values.postgres.restoredb }}
    backupLocation: s3backup-default
    namespaceMapping:
        {{ $dbNamespace }}: {{ $dbNamespace }}   
        
{{- end }}
{{- end }}
{{ end }}