# Default values for service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

project: ""

image:
  repository: # [REQUIRED]
  tag: stable # [REQUIRED]
  pullPolicy: IfNotPresent

feature: ""

nameOverride: ""
fullnameOverride: ""

# [REQUIRED]
# This is a required field
# options [development, stage, production]
environment: "development"

# Database Type. Default to no database.
#
# options [neo4j, mysql, postgres]
databasetype: ""

# This is only needed if you want to implicitly override your ephemeral feature branch database
# This does not affect your production database type right now.
databaseimage:

# Leave this blank unless you need to create one or more init containers.
# https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
# initContainers:
# - name: myContainerName
#   image: my-image:version
#   command: ['array', 'of', 'command', 'args', 'to', 'run']
initContainers:

# We include the option to overide the environment variable for backwards
# compatability, but please use the environment variable above.
# NODE_ENV: 'stage'

# These service fields are to map the container's service to the pod. Please note
# that this chart uses Istio so the virtual service also relies on these values.
service:
  type: IPCluster
  port: 8232
  target: 8080

# The health settings are used to determine whether your service is up and running.
health:
  liveness:
    path: "/liveness"
    initialDelaySeconds: 20
    periodSeconds: 20
    failureThreshold: 3
    timeoutSeconds: 1
  readiness:
    path: "/readiness"
    initialDelaySeconds: 30
    periodSeconds: 20
    failureThreshold: 3
    timeoutSeconds: 1

# [REQUIRED]
# Each deployment gets its own gateway that maps through the virtual service
# into the service and finally into the pod.
istiogateway:
  _default: "dev.cs.aws.chgit.com"
  stage: "dev.cs.aws.chgit.com"
  production: "prod.cs.aws.chgit.com"
  corsPolicy:
    enabled: true
    allowMethods:
      - "PATCH"
      - "GET"
      - "POST"
      - "DELETE"
      - "PUT"
    allowCredentials: true
    maxAge: "24h"
    allowHeaders:
      - "*"
    allowOrigin:
      - "*"

istioAllowedPaths: []
istioAllowedMethods: []

# if you need to overwrite the privilege of one of your deployments
serviceAccountName:

# Example of how to specify kafka topics to be created
# 'name' and 'envKey' are required, everything else has defaults
#
# kafkaTopics
# - name: 'someTopicName'
#   partitions: 3
#   replicationFactor: 2
#   envKey: SOME_TOPIC_NAME
#   config:
#     delete.retention.ms: 100
#     cleanup.policy: compact,delete
# - name: 'someTopicNameDeadLetter'
#   partitions: 3
#   replicationFactor: 2
#   envKey: SOME_TOPIC_NAME_DEAD_LETTER

# postgres:
#  teamId: sa
#  dbName: demodb
#  owner: saadmin
#  version: 11  # database version
#  size: 1Gi   # database size
#  numberOfInstances: 2 # number of postgres instances 1 - master 2..replica

# The default values here are:
authEnabled: false
auth:
  _default:
    enabled: true
    issuer: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7"
    jwks: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7/v1/keys"
    forwardOriginalToken: true
  stage:
    enabled: true
    issuer: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7"
    jwks: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7/v1/keys"
    forwardOriginalToken: true
  production:
    enabled: true
    issuer: "https://chghealthcare.okta.com/oauth2/aus46u1vjfkkTfP7d2p7"
    jwks: "https://chghealthcare.okta.com/oauth2/aus46u1vjfkkTfP7d2p7/v1/keys"
    forwardOriginalToken: true

# The authGlobal values are more constant than regular authorizors. Please overide
# the other values first before considering changing the globals. Ultimate goal
# is to remove the first set of values from charts all together. and utalize the
# authEnabled flag and the global authorizors.
authGlobal:
  _default:
    issuer: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7"
    jwks: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7/v1/keys"
  stage:
    issuer: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7"
    jwks: "https://chghealthcare.oktapreview.com/oauth2/auskmtjacfEi8ffM60h7/v1/keys"
  production:
    issuer: "https://chghealthcare.okta.com/oauth2/default"
    jwks: "https://chghealthcare.okta.com/oauth2/default/v1/keys"

# Authz utilizes Istio's built-in route bases authorization bases on the claims that are in the JWT.
# The current convention only relies on the "groups" claim that the default authorizer
# implicitly adds to all tokens. That way, the external okta tenant can have a universal way
# to manage access. Note that currently, this paradigm does not do resource owner or ABAC level
# access. Please keep dialog close to the SA team for more advanced implementations.
authz:
  [] #remove array when uncommenting
  # - route: '/publicinfo/*'
  #   groups: ['Everyone']
  #   verbs: ['GET']
  # - route: '/divisions/weatherby/*'
  #   groups: ['SuperAdmins', 'TEST_CONNECT_REP']
  #   verbs: ['GET', 'POST', 'PATCH', 'PUT', 'DELETE']

envs: []
# - name: ENVIRONMENT
#   value: production
# - name: CAT
#   value: Man

# secrets -- Creates a secret for the application. All variables passed in env.
# Uses envFrom in the deployment specification to pass these all through.
secretRefs: []
# - global-one

# pullVaultSecrets -- Will automatically place all key/value pairs in a vault secret
# as environment variables for your service to use
pullVaultSecrets: true

secretKeyRefs: []
# - name: YOUR_ENV_VAR
#   secret: secret-store-name
#   key: secret-key

configMaps: []
# - some-configmap-name

configMapKeys: []
# - name: YOUR_ENV_VAR
#   keymap: config-map-name
#   key: key-from-config-map

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: 'true'
  hosts:
    - host:
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
# '977624198390.dkr.ecr.us-west-2.amazonaws.com/neo4j:latest'
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with minimal
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 1
  #   memory: 2048Mi
  # requests:
  #   cpu: 750m
  #   memory: 1024Mi

nodeSelector: {}

tolerations: []

affinity: {}

persistentVolumeClaim:
  {}
  # This should only be used if a claim does not already exist.  If there is a pre-existing
  # claim (e.g. an existing shared volume), you need only attach a persistentVolume (below)
  # and reference the name of the existing claim.
  # enabled: false
  # size: 2Gi
  # name: px-test-shared
  # type: shared # Valid options: shared, secure, postgres
  # mode: ReadWriteMany # IMPORTANT: for any type other than "shared" the mode should be set to ReadWriteOnce

persistentVolume:
  {}
  # Mount a volume from a persistentVolumeClaim.  If not using a pre-existing claim, you must
  # also enable a new persistentVolumeClaim (above) and reference it by name (claimName) here
  # attach: false
  # claimName: px-text-shared
  # volumeName: data
  # mountPath: /data
scaling:
  minReplicas: 2
  maxReplicas: 4
  averageCpuUtilization: 50

# This value is what sets the annotation on deployed resources for auto
# clean up in our enabled environments IE: Feature Namespace. If you need
# your service to stay up longer you can set this to your needs.
cleanUpIn: 48h
# For creating a Job to run with your service.
# More information here: https://kubernetes.io/docs/concepts/workloads/controllers/job/
# jobs:
#   - containerName: 'some-job'
#     # number of retries. Default: 4
#     # if you want a backoffLimit of 0, it must be quoted.
#     backoffLimit: 4
#     image: 'node:12'
#     command: ['echo', 'foobar']
#     annotations:
#       "helm.sh/hook": pre-install,pre-upgrade
#       "helm.sh/hook-delete-policy": hook-succeeded
#     envs:
#     - name: NODE_ENV
#       value: development

# Spin up a redis cluster for your service to talk to, an environment variable REDIS_HOST will be set for your service to connect to the cluster with
# Additional redis config options found here:
# https://raw.githubusercontent.com/redis/redis/5.0/redis.conf
# Warning: The Redis operator fails to update redis clusters with config changes.
# If you need to make a config change, you'll need to delete the StatefulSet
#redis:
#  replicas: 3
#  config:
#    maxmemory: "16mb"
#    maxmemory-policy: "allkeys-lru"
#    repl-ping-replica-period: 10

# For creating a PostgresSql DB Cluster
# More information here: https://github.com/chghealthcare/chg-terraform-infrastructure/wiki/Database-as-a-Service
#postgres:
#  teamId: sre
#  dbName: demodb
#  owner: sreadmin
#  size: 1Gi
#  numberOfInstances: 1
#  version: 11

# For Overriding the default deployment strategy
### For a Rolling update strategy (this is the default behavior but can override the max/min options
#strategy:
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
#  type: RollingUpdate
### For a Recreate update strategy. All existing Pods are killed before new ones are created
#strategy:
#  type: Recreate
#

# For forcing a service to be behind the VPN, set this to true.
# Defaults to false.
# This will change the gateway that requests go through to the private gateway.
# It will also change the dns name you need to go through to reach your service,
# from myservice.prod.chgapi.com (aka myservice.prod.platform.aws.chgit.com) to myservice.prod.chgapi.net
#private: true

# Run scheduled jobs via the cronjobs template
# cronjobs:
#   - containerName: "chg-leads-intake-api-ping-test"
#     schedule: "*/2 * * * *"
#     successfulJobsHistoryLimit: 1
#     failedJobsHistoryLimit: 2
#     concurrencyPolicy: Replace
#     # image is set in helm upgrade command
#     command: ["npm", "run", "test:ping"]
#     annotations:
#       "helm.sh/hook": post-install,post-upgrade
#       "helm.sh/hook-delete-policy": before-hook-creation
